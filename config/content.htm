<h1>簡介</h1><p>學會git的基本操作</p><p>1.<strong>github</strong></p><p>2.<strong>p37&gt;start.bat</strong></p><p><img src="/images/ShareX_2018-10-15_14-38-56.png" width="370" height="207" alt=""></p><p><img src="/images/ShareX_2018-10-15_15-21-49.png" width="371" height="207" alt=""></p><h2>CMSimfly 網站</h2><p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p><h2>reveal 投影片</h2><p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/reveal.leo</p><h2>pelican 網誌</h2><p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/pelican.leo&nbsp;</p><p>各分組必須自行更改&nbsp;@edit pelicanconf.py 中的 AUTHOR 與 SITENAME</p><p>更改 @edit publishconf.py 中的 SITEURL</p><h1>git指令</h1><h4>Git 新增檔案</h4><ul><li>git add . # 將資料先暫存到 staging area, add 之後再新增的資料, 於此次 commit 不會含在裡面.</li><li>git add filename</li><li>git add modify-file # 修改過的檔案, 也要 add. (不然 commit 要加上 -a 的參數)</li><li>git add -u # 只加修改過的檔案, 新增的檔案不加入.</li><li>git add -i # 進入互動模式</li></ul><h4>Git 刪除檔案</h4><ul><li>git rm filename</li></ul><h4>Git 修改檔名、搬移目錄</h4><ul><li>git mv filename new-filename</li></ul><h4>Git status 看目前的狀態</h4><ul><li>git status # 看目前檔案的狀態</li></ul><h4>Git Commit</h4><ul><li>git commit</li><li>git commit -m 'commit message'</li><li>git commit -a -m 'commit -message' # 將所有修改過得檔案都 commit, 但是 新增的檔案 還是得要先 add.</li><li>git commit -a -v # -v 可以看到檔案哪些內容有被更改, -a 把所有修改的檔案都 commit</li></ul><h4>Git 產生新的 branch</h4><ul><li>git branch # 列出目前有多少 branch</li><li>git branch new-branch # 產生新的 branch (名稱: new-branch), 若沒有特別指定, 會由目前所在的 branch / master 直接複製一份.</li><li>git branch new-branch master # 由 master 產生新的 branch(new-branch)</li><li>git branch new-branch v1 # 由 tag(v1) 產生新的 branch(new-branch)</li><li>git branch -d new-branch # 刪除 new-branch</li><li>git branch -D new-branch # 強制刪除 new-branch</li><li>git checkout -b new-branch test # 產生新的 branch, 並同時切換過去 new-branch</li><li># 與 remote repository 有關</li><li>git branch -r # 列出所有 Repository branch</li><li>git branch -a # 列出所有 branch</li></ul><h4>Git checkout 切換 branch</h4><ul><li>git checkout branch-name # 切換到 branch-name</li><li>git checkout master # 切換到 master</li><li>git checkout -b new-branch master # 從 master 建立新的 new-branch, 並同時切換過去 new-branch</li><li>git checkout -b newbranch # 由現在的環境為基礎, 建立新的 branch</li><li>git checkout -b newbranch origin # 於 origin 的基礎, 建立新的 branch</li><li>git checkout filename # 還原檔案到 Repository 狀態</li><li>git checkout HEAD . # 將所有檔案都 checkout 出來(最後一次 commit 的版本), 注意, 若有修改的檔案都會被還原到上一版. (git checkout -f 亦可)</li><li>git checkout xxxx . # 將所有檔案都 checkout 出來(xxxx commit 的版本, xxxx 是 commit 的編號前四碼), 注意, 若有修改的檔案都會被還原到上一版.</li><li>git checkout -- * # 恢復到上一次 Commit 的狀態(* 改成檔名, 就可以只恢復那個檔案)</li></ul><h4>Git diff</h4><ul><li>git diff master # 與 Master 有哪些資料不同</li><li>git diff --cached # 比較 staging area 跟本來的 Repository</li><li>git diff tag1 tag2 # tag1, 與 tag2 的 diff</li><li>git diff tag1:file1 tag2:file2 # tag1, 與 tag2 的 file1, file2 的 diff</li><li>git diff # 比較 目前位置 與 staging area</li><li>git diff --cached # 比較 staging area 與 Repository 差異</li><li>git diff HEAD # 比較目前位置 與 Repository 差別</li><li>git diff new-branch # 比較目前位置 與 branch(new-branch) 的差別</li><li>git diff --stat</li></ul><h4>Git Tag</h4><ul><li>git tag v1 ebff # log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容, 設定簡短好記得 Tag: v1</li><li>git tag 中文 ebff # tag 也可以下中文, 任何文字都可以</li><li>git tag -d 中文 # 把 tag=中文 刪掉</li></ul><h4>Git log</h4><ul><li>git log # 將所有 log 秀出</li><li>git log --all # 秀出所有的 log (含 branch)</li><li>git log -p # 將所有 log 和修改過得檔案內容列出</li><li>git log -p filename # 將此檔案的 commit log 和 修改檔案內容差異部份列出</li><li>git log --name-only # 列出此次 log 有哪些檔案被修改</li><li>git log --stat --summary # 查每個版本間的更動檔案和行數</li><li>git log filename # 這個檔案的所有 log</li><li>git log directory # 這個目錄的所有 log</li><li>git log -S'foo()' # log 裡面有 foo() 這字串的.</li><li>git log --no-merges # 不要秀出 merge 的 log</li><li>git log --since="2 weeks ago" # 最後這 2週的 log</li><li>git log --pretty=oneline # 秀 log 的方式</li><li>git log --pretty=short # 秀 log 的方式</li><li>git log --pretty=format:'%h was %an, %ar, message: %s'</li><li>git log --pretty=format:'%h : %s' --graph # 會有簡單的文字圖形化, 分支等.</li><li>git log --pretty=format:'%h : %s' --topo-order --graph # 依照主分支排序</li><li>git log --pretty=format:'%h : %s' --date-order --graph # 依照時間排序</li></ul><h4>Git show</h4><ul><li>git show ebff # 查 log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容</li><li>git show v1 # 查 tag:v1 的修改內容</li><li>git show v1:test.txt # 查 tag:v1 的 test.txt 檔案修改內容</li><li>git show HEAD # 此版本修改的資料</li><li>git show HEAD^ # 前一版修改的資料</li><li>git show HEAD^^ # 前前一版修改的資料</li><li>git show HEAD~4 # 前前前前一版修改的資料</li></ul><h4>Git reset 還原</h4><ul><li>git reset --hard HEAD # 還原到最前面</li><li>git reset --hard HEAD~3</li><li>git reset --soft HEAD~3</li><li>git reset HEAD filename # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)</li></ul><h4>Git grep</h4><ul><li>git grep "te" v1 # 查 v1 是否有 "te" 的字串</li><li>git grep "te" # 查現在版本是否有 "te" 的字串</li></ul><h4>Git stash 暫存</h4><ul><li>git stash # 丟進暫存區</li><li>git stash list # 列出所有暫存區的資料</li><li>git stash pop # 取出最新的一筆, 並移除.</li><li>git stash apply # 取出最新的一筆 stash 暫存資料. 但是 stash 資料不移除</li><li>git stash clear # 把 stash 都清掉</li></ul><h4>Git merge 合併</h4><ul><li>git merge</li><li>git merge master</li><li>git merge new-branch</li><li>下述轉載自: ihower 的<span>&nbsp;</span><a title="Git 版本控制系統(2) 開 branch 分支和操作遠端 repo." href="http://ihower.idv.tw/blog/archives/2620" target="_blank" rel="noopener">Git 版本控制系統(2) 開 branch 分支和操作遠端 repo.</a>x</li></ul><blockquote><ul><li>Straight merge 預設的合併模式，會有全部的被合併的 branch commits 記錄加上一個 merge-commit，看線圖會有兩條 Parents 線，並保留所有 commit log。</li><li>Squashed commit 壓縮成只有一個 merge-commit，不會有被合併的 log。SVN 的 merge 即是如此。</li><li>cherry-pick 只合併指定的 commit</li><li>rebase 變更 branch 的分支點：找到要合併的兩個 branch 的共同的祖先，然後先只用要被 merge 的 branch 來 commit 一遍，然後再用目前 branch 再 commit 上去。這方式僅適合還沒分享給別人的 local branch，因為等於砍掉重練 commit log。</li></ul><p>指令操作</p><ul><li>git merge &lt;branch_name&gt; # 合併另一個 branch，若沒有 conflict 衝突會直接 commit。若需要解決衝突則會再多一個 commit。</li><li>git merge --squash &lt;branch_name&gt; # 將另一個 branch 的 commit 合併為一筆，特別適合需要做實驗的 fixes bug 或 new feature，最後只留結果。合併完不會幫你先 commit。</li><li>git cherry-pick 321d76f # 只合併特定其中一個 commit。如果要合併多個，可以加上 -n 指令就不會先幫你 commit，這樣可以多 pick幾個要合併的 commit，最後再 git commit 即可。</li></ul></blockquote><h4>Git blame</h4><ul><li>git blame filename # 關於此檔案的所有 commit 紀錄</li></ul><h4>Git 還原已被刪除的檔案</h4><ul><li>git ls-files -d # 查看已刪除的檔案</li><li>git ls-files -d | xargs git checkout -- # 將已刪除的檔案還原</li></ul><h4>Git 維護</h4><ul><li>git gc # 整理前和整理後的差異, 可由: git count-objects 看到.</li><li>git gc --prune</li><li>git fsck --full</li></ul><h4>Git revert 資料還原</h4><ul><li>git revert HEAD # 回到前一次 commit 的狀態</li><li><span>git revert HEAD^ # 回到前前一次 commit 的狀態</span></li><li>git reset HEAD filename # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)</li><li>git checkout filename # 從 unstaging 狀態回到最初 Repository 的檔案(檔案內容變回修改前)</li></ul><h4>Git Rollback 還原到上一版</h4><ul><li>git reset --soft HEAD^</li><li>編輯 + git add filename</li><li>git commit -m 'rollback'</li></ul><p>以下與 遠端 Repository 相關</p><h4>Git remote 維護遠端檔案</h4><ul><li>git remote</li><li>git remote add new-branch http://git.example.com.tw/project.git # 增加遠端 Repository 的 branch(origin -&gt; project)</li><li>git remote show # 秀出現在有多少 Repository</li><li>git remote rm new-branch # 刪掉</li><li>git remote update # 更新所有 Repository branch</li><li>git branch -r # 列出所有 Repository branch</li></ul><h4>抓取 / 切換 Repository 的 branch</h4><ul><li>git fetch origin</li><li>git checkout --track -b reps-branch origin/reps-branch # 抓取 reps-branch, 並將此 branch 建立於 local 的 reps-branch</li></ul><h4>刪除 Repository 的 branch</h4><ul><li>git push origin :heads/reps-branch</li><li>git push origin --delete reps-branch</li></ul><h1><span style="font-family: aileron; font-size: 34px;">課程簡要</span></h1><p>week1</p><p><span>根據&nbsp;</span><a href="https://pages.github.com/">Github Pages</a><span>&nbsp;說明, 建立個人課程網頁 學號.github.io</span><br><span>git clone&nbsp;</span><a href="https://github.com/mdecourse/2018fall">https://github.com/mdecourse/2018fall</a><span>&nbsp;至近端, 以 s40723240帳號錄製教學影片,利用 p37 中的 git 建立個人的 Github </span><span></span></p><p>week2</p><p><span>登入 Github 後, 可以從 Github Classroom 連結取得所指定的期中作業倉儲. 將此倉儲 git clone 到近端後, 必須利用 git checkout 從內定的 master 分支, 切換到 gh-pages, 此後的網站改版都將以 gh-pages 分支的內容為主. 切換到 gh-pages 分支後, 使用者在命令列中進入該倉儲, 然後以 python wsgi.py 啟動 CMSimfly 動態網站, 以內定的 admin 管理者密碼在近端進行內容改版.</span></p><p>week3</p><p>git的基本練習</p><p>week4</p><p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">期中作業倉儲中 CMSimfly, Reveal, Pelican Blog 管理方法說明</yt-formatted-string><strong></strong></p><p>week5</p><p>week6</p><h1>操作影片</h1><p>每週各分組組員必須將參與分組協同過程之電腦操作流程錄成影片後, 上傳至各自的 Youtube 帳號區, 並嵌入各分組網站頁面中.</p><h2>Week1</h2><p><span>利用 p37 中的 git 建立個人的 Github Pages 網站 </span><span>&nbsp;建立 學號.github.io 網站</span></p><p><span>影片:<a href="https://www.youtube.com/watch?v=h6UBrks6hhg&amp;feature=youtu.be" title="week1">https://www.youtube.com/watch?v=h6UBrks6hhg&amp;feature=youtu.be</a></span></p><h2>Week2</h2><p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">說明如何管理個人的期中作業網站內容</yt-formatted-string></p><p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">如何以 ShareX 取圖, 如何管理 CMSimfly 作業倉儲.</yt-formatted-string></p><p>影片:<a href="https://www.youtube.com/watch?v=jBaTbKd-g7w">https://www.youtube.com/watch?v=jBaTbKd-g7w</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href="https://www.youtube.com/watch?v=ihrK3H0TM40">https://www.youtube.com/watch?v=ihrK3H0TM40</a></p><h2>Week3</h2><p>git基本操作</p><p>影片:<a href="https://www.youtube.com/watch?v=JOyP2Av3JIs">https://www.youtube.com/watch?v=JOyP2Av3JIs</a></p><h2>Week4</h2><p>更改投影片</p><p>影片:<a href="https://www.youtube.com/watch?v=zdnKwxzyiRw&amp;t=2s">https://www.youtube.com/watch?v=zdnKwxzyiRw&amp;t=2s</a></p><h2>Week5</h2><h2>Week6</h2><h1>Python 手冊</h1><p>計算機程式教材:&nbsp;&nbsp;<a href="http://mde.tw/cp2018/content/">http://mde.tw/cp2018/content/</a>&nbsp;</p><p>可攜程式下載: <a href="https://drive.google.com/file/d/1DWtyoUhl8CycKJ8uulB3viRXE39KqpE1/view?usp=sharing">p37.7z</a></p><h1>OnShape 手冊</h1><p><a href="https://www.onshape.com/">https://www.onshape.com/</a>&nbsp;</p><p>電腦輔助設計實習課程教材:&nbsp;<a href="http://mde.tw/cadp2018/content/">http://mde.tw/cadp2018/content/</a>&nbsp;</p><h1>Fusion 360</h1><p><a href="https://www.autodesk.com/products/fusion-360/students-teachers-educators">https://www.autodesk.com/products/fusion-360/students-teachers-educators</a>&nbsp;</p>