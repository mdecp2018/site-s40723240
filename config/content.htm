<h1>簡介</h1>
<p>學會git的基本操作</p>
<p>下圖為上課會用到</p>
<p>1.github</p>
<p><img alt="" height="212" src="/images/ShareX_2018-10-15_14-38-56.png" width="379"/></p>
<p>2.p37&gt;start.bat</p>
<p><img alt="" height="199" src="/images/cmd_2018-10-17_23-15-07.png" width="380"/></p>
<p>3.mde.tw</p>
<p><img alt="" height="191" src="/images/chrome_2018-10-27_18-53-34.png" width="379"/></p>
<h2>CMSimfly 網站</h2>
<p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p>
<h2>reveal 投影片</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/reveal.leo</p>
<h2>pelican 網誌</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/pelican.leo </p>
<p>各分組必須自行更改 @edit pelicanconf.py 中的 AUTHOR 與 SITENAME</p>
<p>更改 @edit publishconf.py 中的 SITEURL</p>
<h2>git指令</h2>
<p>Git 新增檔案</p>
<ul>
<li>git add . # 將資料先暫存到 staging area, add 之後再新增的資料, 於此次 commit 不會含在裡面.</li>
<li>git add filename</li>
<li>git add modify-file # 修改過的檔案, 也要 add. (不然 commit 要加上 -a 的參數)</li>
<li>git add -u # 只加修改過的檔案, 新增的檔案不加入.</li>
<li>git add -i # 進入互動模式</li>
</ul>
<p>Git 刪除檔案</p>
<ul>
<li>git rm filename</li>
</ul>
<p>Git 修改檔名、搬移目錄</p>
<ul>
<li>git mv filename new-filename</li>
</ul>
<p>Git status 看目前的狀態</p>
<ul>
<li>git status # 看目前檔案的狀態</li>
</ul>
<p>Git Commit</p>
<ul>
<li>git commit</li>
<li>git commit -m 'commit message'</li>
<li>git commit -a -m 'commit -message' # 將所有修改過得檔案都 commit, 但是 新增的檔案 還是得要先 add.</li>
<li>git commit -a -v # -v 可以看到檔案哪些內容有被更改, -a 把所有修改的檔案都 commit</li>
</ul>
<p>Git 產生新的 branch</p>
<ul>
<li>git branch # 列出目前有多少 branch</li>
<li>git branch new-branch # 產生新的 branch (名稱: new-branch), 若沒有特別指定, 會由目前所在的 branch / master 直接複製一份.</li>
<li>git branch new-branch master # 由 master 產生新的 branch(new-branch)</li>
<li>git branch new-branch v1 # 由 tag(v1) 產生新的 branch(new-branch)</li>
<li>git branch -d new-branch # 刪除 new-branch</li>
<li>git branch -D new-branch # 強制刪除 new-branch</li>
<li>git checkout -b new-branch test # 產生新的 branch, 並同時切換過去 new-branch</li>
<li># 與 remote repository 有關</li>
<li>git branch -r # 列出所有 Repository branch</li>
<li>git branch -a # 列出所有 branch</li>
</ul>
<p>Git checkout 切換 branch</p>
<ul>
<li>git checkout branch-name # 切換到 branch-name</li>
<li>git checkout master # 切換到 master</li>
<li>git checkout -b new-branch master # 從 master 建立新的 new-branch, 並同時切換過去 new-branch</li>
<li>git checkout -b newbranch # 由現在的環境為基礎, 建立新的 branch</li>
<li>git checkout -b newbranch origin # 於 origin 的基礎, 建立新的 branch</li>
<li>git checkout filename # 還原檔案到 Repository 狀態</li>
<li>git checkout HEAD . # 將所有檔案都 checkout 出來(最後一次 commit 的版本), 注意, 若有修改的檔案都會被還原到上一版. (git checkout -f 亦可)</li>
<li>git checkout xxxx . # 將所有檔案都 checkout 出來(xxxx commit 的版本, xxxx 是 commit 的編號前四碼), 注意, 若有修改的檔案都會被還原到上一版.</li>
<li>git checkout -- * # 恢復到上一次 Commit 的狀態(* 改成檔名, 就可以只恢復那個檔案)</li>
</ul>
<p>Git diff</p>
<ul>
<li>git diff master # 與 Master 有哪些資料不同</li>
<li>git diff --cached # 比較 staging area 跟本來的 Repository</li>
<li>git diff tag1 tag2 # tag1, 與 tag2 的 diff</li>
<li>git diff tag1:file1 tag2:file2 # tag1, 與 tag2 的 file1, file2 的 diff</li>
<li>git diff # 比較 目前位置 與 staging area</li>
<li>git diff --cached # 比較 staging area 與 Repository 差異</li>
<li>git diff HEAD # 比較目前位置 與 Repository 差別</li>
<li>git diff new-branch # 比較目前位置 與 branch(new-branch) 的差別</li>
<li>git diff --stat</li>
</ul>
<p>Git Tag</p>
<ul>
<li>git tag v1 ebff # log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容, 設定簡短好記得 Tag: v1</li>
<li>git tag 中文 ebff # tag 也可以下中文, 任何文字都可以</li>
<li>git tag -d 中文 # 把 tag=中文 刪掉</li>
</ul>
<p>Git log</p>
<ul>
<li>git log # 將所有 log 秀出</li>
<li>git log --all # 秀出所有的 log (含 branch)</li>
<li>git log -p # 將所有 log 和修改過得檔案內容列出</li>
<li>git log -p filename # 將此檔案的 commit log 和 修改檔案內容差異部份列出</li>
<li>git log --name-only # 列出此次 log 有哪些檔案被修改</li>
<li>git log --stat --summary # 查每個版本間的更動檔案和行數</li>
<li>git log filename # 這個檔案的所有 log</li>
<li>git log directory # 這個目錄的所有 log</li>
<li>git log -S'foo()' # log 裡面有 foo() 這字串的.</li>
<li>git log --no-merges # 不要秀出 merge 的 log</li>
<li>git log --since="2 weeks ago" # 最後這 2週的 log</li>
<li>git log --pretty=oneline # 秀 log 的方式</li>
<li>git log --pretty=short # 秀 log 的方式</li>
<li>git log --pretty=format:'%h was %an, %ar, message: %s'</li>
<li>git log --pretty=format:'%h : %s' --graph # 會有簡單的文字圖形化, 分支等.</li>
<li>git log --pretty=format:'%h : %s' --topo-order --graph # 依照主分支排序</li>
<li>git log --pretty=format:'%h : %s' --date-order --graph # 依照時間排序</li>
</ul>
<p>Git show</p>
<ul>
<li>git show ebff # 查 log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容</li>
<li>git show v1 # 查 tag:v1 的修改內容</li>
<li>git show v1:test.txt # 查 tag:v1 的 test.txt 檔案修改內容</li>
<li>git show HEAD # 此版本修改的資料</li>
<li>git show HEAD^ # 前一版修改的資料</li>
<li>git show HEAD^^ # 前前一版修改的資料</li>
<li>git show HEAD~4 # 前前前前一版修改的資料</li>
</ul>
<p>Git reset 還原</p>
<ul>
<li>git reset --hard HEAD # 還原到最前面</li>
<li>git reset --hard HEAD~3</li>
<li>git reset --soft HEAD~3</li>
<li>git reset HEAD filename # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)</li>
</ul>
<p>Git grep</p>
<ul>
<li>git grep "te" v1 # 查 v1 是否有 "te" 的字串</li>
<li>git grep "te" # 查現在版本是否有 "te" 的字串</li>
</ul>
<p>Git stash 暫存</p>
<ul>
<li>git stash # 丟進暫存區</li>
<li>git stash list # 列出所有暫存區的資料</li>
<li>git stash pop # 取出最新的一筆, 並移除.</li>
<li>git stash apply # 取出最新的一筆 stash 暫存資料. 但是 stash 資料不移除</li>
<li>git stash clear # 把 stash 都清掉</li>
</ul>
<p>Git merge 合併</p>
<ul>
<li>git merge</li>
<li>git merge master</li>
<li>git merge new-branch</li>
</ul>
<blockquote>
<ul>
<li>Straight merge 預設的合併模式，會有全部的被合併的 branch commits 記錄加上一個 merge-commit，看線圖會有兩條 Parents 線，並保留所有 commit log。</li>
<li>Squashed commit 壓縮成只有一個 merge-commit，不會有被合併的 log。SVN 的 merge 即是如此。</li>
<li>cherry-pick 只合併指定的 commit</li>
<li>rebase 變更 branch 的分支點：找到要合併的兩個 branch 的共同的祖先，然後先只用要被 merge 的 branch 來 commit 一遍，然後再用目前 branch 再 commit 上去。這方式僅適合還沒分享給別人的 local branch，因為等於砍掉重練 commit log。</li>
</ul>
<p>指令操作</p>
<ul>
<li>git merge &lt;branch_name&gt; # 合併另一個 branch，若沒有 conflict 衝突會直接 commit。若需要解決衝突則會再多一個 commit。</li>
<li>git merge --squash &lt;branch_name&gt; # 將另一個 branch 的 commit 合併為一筆，特別適合需要做實驗的 fixes bug 或 new feature，最後只留結果。合併完不會幫你先 commit。</li>
<li>git cherry-pick 321d76f # 只合併特定其中一個 commit。如果要合併多個，可以加上 -n 指令就不會先幫你 commit，這樣可以多 pick幾個要合併的 commit，最後再 git commit 即可。</li>
</ul>
</blockquote>
<p>Git blame</p>
<ul>
<li>git blame filename # 關於此檔案的所有 commit 紀錄</li>
</ul>
<p>Git 還原已被刪除的檔案</p>
<ul>
<li>git ls-files -d # 查看已刪除的檔案</li>
<li>git ls-files -d | xargs git checkout -- # 將已刪除的檔案還原</li>
</ul>
<p>Git 維護</p>
<ul>
<li>git gc # 整理前和整理後的差異, 可由: git count-objects 看到.</li>
<li>git gc --prune</li>
<li>git fsck --full</li>
</ul>
<p>Git revert 資料還原</p>
<ul>
<li>git revert HEAD # 回到前一次 commit 的狀態</li>
<li><span>git revert HEAD^ # 回到前前一次 commit 的狀態</span></li>
<li>git reset HEAD filename # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)</li>
<li>git checkout filename # 從 unstaging 狀態回到最初 Repository 的檔案(檔案內容變回修改前)</li>
</ul>
<p>Git Rollback 還原到上一版</p>
<ul>
<li>git reset --soft HEAD^</li>
<li>編輯 + git add filename</li>
<li>git commit -m 'rollback'</li>
</ul>
<p>以下與 遠端 Repository 相關</p>
<p>Git remote 維護遠端檔案</p>
<ul>
<li>git remote</li>
<li>git remote add new-branch http://git.example.com.tw/project.git # 增加遠端 Repository 的 branch(origin -&gt; project)</li>
<li>git remote show # 秀出現在有多少 Repository</li>
<li>git remote rm new-branch # 刪掉</li>
<li>git remote update # 更新所有 Repository branch</li>
<li>git branch -r # 列出所有 Repository branch</li>
</ul>
<p>抓取 / 切換 Repository 的 branch</p>
<ul>
<li>git fetch origin</li>
<li>git checkout --track -b reps-branch origin/reps-branch # 抓取 reps-branch, 並將此 branch 建立於 local 的 reps-branch</li>
</ul>
<p>刪除 Repository 的 branch</p>
<ul>
<li>git push origin :heads/reps-branch</li>
<li>git push origin --delete reps-branch</li>
</ul>
<h1>期中作業用影片</h1>
<p>每週各分組組員必須將參與分組協同過程之電腦操作流程錄成影片後, 上傳至各自的 Youtube 帳號區, 並嵌入各分組網站頁面中.</p>
<h2 style="color: #626262;">第一周</h2>
<p>利用 p37 中的 git 建立個人的 Github Pages 網站 <span style="font-family: Lato; font-size: 14px;"> 建立 學號.github.io 網站</span></p>
<p><span>影片:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/h6UBrks6hhg?feature=youtu" width="560"></iframe></span></p>
<h2>第二周</h2>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">說明如何管理個人的期中作業網站內容</yt-formatted-string></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">如何以 ShareX 取圖, 如何管理 CMSimfly 作業倉儲.</yt-formatted-string></p>
<p>影片:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jBaTbKd-g7w" width="560"></iframe></p>
<p>   <a href="https://www.youtube.com/watch?v=ihrK3H0TM40"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jBaTbKd-g7w" width="560"></iframe><br/></a></p>
<h2>第三周</h2>
<p>git基本操作</p>
<p>影片:<a href="https://www.youtube.com/watch?v=JOyP2Av3JIs"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jBaTbKd-g7w" width="560"></iframe><br/></a></p>
<h2>第四周</h2>
<p>期中作業網站</p>
<p>影片:<a href="https://www.youtube.com/watch?v=zdnKwxzyiRw&amp;t=2s"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jBaTbKd-g7w" width="560"></iframe><br/></a></p>
<p style="color: #626262;"></p>
<h2><span style="color: #626262;">第五周</span></h2>
<p>update readme.md</p>
<p><span style="color: #626262;">影片:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6fOtZ_Wt1o8?feature=youtu" width="560"></iframe></span></p>
<p><span style="color: #626262;"></span></p>
<h2>第六周</h2>
<p>升級cmsimfly倉儲的flaskapp.py</p>
<p>影片:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/maoe1-46uTA?feature=youtu" width="560"></iframe></p>
<h2>第七周</h2>
<p>更改網站背景</p>
<p>影片:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/N7TAG1fC48M?feature=youtu" width="560"></iframe></p>
<h1>Python 手冊</h1>
<p>計算機程式教材:  <a href="http://mde.tw/cp2018/content/">http://mde.tw/cp2018/content/</a> </p>
<p>可攜程式下載: <a href="https://drive.google.com/file/d/1DWtyoUhl8CycKJ8uulB3viRXE39KqpE1/view?usp=sharing">p37.7z</a></p>
<h1>OnShape 手冊</h1>
<p><a href="https://www.onshape.com/">https://www.onshape.com/</a> </p>
<p>電腦輔助設計實習課程教材: <a href="http://mde.tw/cadp2018/content/">http://mde.tw/cadp2018/content/</a> </p>
<h1>Fusion 360</h1>
<p><a href="https://www.autodesk.com/products/fusion-360/students-teachers-educators">https://www.autodesk.com/products/fusion-360/students-teachers-educators</a> </p>