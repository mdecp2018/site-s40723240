{"pages":[{"title":"About","text":"2018 Fall 分組網誌 課程倉儲: https://github.com/mdecp2018/site-s40723240 課程投影片: https://mdecp2018.github.io/site-s40723240/reveal/#/ 課程網誌: https://mdecp2018.github.io/site-s40723240/blog/","tags":"misc","url":"https://mdecp2018.github.io/site-s40723240/blog/pages/about/"},{"title":"s40723240個人網誌","text":"課程簡要 git python語法基本操作 week1 week2 week3 week4 week5 week6 week7 week8 git指令 Git 新增檔案 git add . # 將資料先暫存到 staging area, add 之後再新增的資料, 於此次 commit 不會含在裡面. git add filename git add modify-file # 修改過的檔案, 也要 add. (不然 commit 要加上 -a 的參數) git add -u # 只加修改過的檔案, 新增的檔案不加入. git add -i # 進入互動模式 Git 刪除檔案 git rm filename Git 修改檔名、搬移目錄 git mv filename new-filename Git status 看目前的狀態 git status # 看目前檔案的狀態 Git Commit git commit git commit -m 'commit message' git commit -a -m 'commit -message' # 將所有修改過得檔案都 commit, 但是 新增的檔案 還是得要先 add. git commit -a -v # -v 可以看到檔案哪些內容有被更改, -a 把所有修改的檔案都 commit Git 產生新的 branch git branch # 列出目前有多少 branch git branch new-branch # 產生新的 branch (名稱: new-branch), 若沒有特別指定, 會由目前所在的 branch / master 直接複製一份. git branch new-branch master # 由 master 產生新的 branch(new-branch) git branch new-branch v1 # 由 tag(v1) 產生新的 branch(new-branch) git branch -d new-branch # 刪除 new-branch git branch -D new-branch # 強制刪除 new-branch git checkout -b new-branch test # 產生新的 branch, 並同時切換過去 new-branch 與 remote repository 有關 git branch -r # 列出所有 Repository branch git branch -a # 列出所有 branch Git checkout 切換 branch git checkout branch-name # 切換到 branch-name git checkout master # 切換到 master git checkout -b new-branch master # 從 master 建立新的 new-branch, 並同時切換過去 new-branch git checkout -b newbranch # 由現在的環境為基礎, 建立新的 branch git checkout -b newbranch origin # 於 origin 的基礎, 建立新的 branch git checkout filename # 還原檔案到 Repository 狀態 git checkout HEAD . # 將所有檔案都 checkout 出來(最後一次 commit 的版本), 注意, 若有修改的檔案都會被還原到上一版. (git checkout -f 亦可) git checkout xxxx . # 將所有檔案都 checkout 出來(xxxx commit 的版本, xxxx 是 commit 的編號前四碼), 注意, 若有修改的檔案都會被還原到上一版. git checkout -- * # 恢復到上一次 Commit 的狀態(* 改成檔名, 就可以只恢復那個檔案) 課程倉儲 利用 Github 倉儲存放與計算機程式相關的資料, 有幾項好處: 第一, 在不自建網站的情況下, 目前 Github 仍允許免費使用, 管理者除了可以利用網際模式將資料送到對應的 cp github 倉儲 外, 也可以利用近端的 git 客戶端程式, 以分散式版次的流程管理各階段的改版資料. 第二, Github 提供的 Github Pages, 可以讓純 html 加上 Javascript 的網站, 直接在 cp 課程網站 伺服. 第三, 改版後的 CMSimfly, 加上 Pelican 靜態網誌與 Reveal.js 投影片系統, 均為靜態網站資料, 可以直接整合一起, 透過一個網址當作上課參考資料. 該學習哪種程式語言? C/C++、Python、Lua 或 Javascript? 都可以. 在這裡, 學 C/C++ 是為了編寫 Arduino 控制程式, 以及結合 Qt5 建立各種能快速進行工程分析的程式庫, 學習 Python 是為了快速完成 C/C++ 無法迅速完成的分析、模擬與運算, 也能透過 PyQt5 建立視窗程式, 或者呼叫 Flask 建立能在網際環境中執行的協同設計套件. 學習 Lua 是為了能在 V-rep 中使用, 至於 Javascript, 已經無所不在, 尤其在網際成是開發過程, 更是重要, 有其學習的必要性.","tags":"Misc","url":"https://mdecp2018.github.io/site-s40723240/blog/2018-Fall-Project-Blog.html"}]}